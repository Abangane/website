{"version":3,"file":"static/js/338.30cdf6cf.chunk.js","mappings":"6PAqJA,UA3ImB,WACf,MAA4BA,EAAAA,UAAe,GAA3C,eAAOC,EAAP,KAAeC,EAAf,KACA,EAAgCF,EAAAA,SAAe,IAA/C,eAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA0BJ,EAAAA,SAAe,MAAzC,eAAOK,EAAP,KAAcC,EAAd,KACA,EAAgCN,EAAAA,SAAe,GAA/C,eAAOO,EAAP,KAAiBC,EAAjB,KAkEA,OACI,0BACI,UAAC,IAAD,CAAWC,SAAS,KAAKC,GAAI,CAAEC,WAAY,QAA3C,WACI,SAAC,IAAD,CAAYC,QAAQ,KAAKC,MAAM,SAA/B,0BAGA,UAAC,KAAD,CAAMC,WAAS,EAACC,QAAS,IAAKL,GAAI,CAAEM,UAAW,OAAQC,aAAc,QAArE,WACI,SAAC,KAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,UACI,UAAC,IAAD,CAAKC,UAAU,SAAf,WACI,kBACIC,OAAO,UACPC,MAAO,CAAEC,QAAS,QAClBC,GAAG,qBACHC,UAAQ,EACRC,KAAK,OACLC,SA/EF,SAACC,GACvBtB,EAASsB,EAAEC,OAAOC,MAAM,QAgFJ,mBAAOC,QAAQ,qBAAf,WACI,UAAC,IAAD,CAAQC,UAAU,OAAOtB,GAAI,CAAEuB,MAAO,WAAtC,WACI,SAAC,IAAD,IADJ,0BAGChC,GACG,SAAC,IAAD,CAAKS,GAAI,CAAEwB,MAAO,QAAlB,UACI,SAAC,IAAD,CAAgBtB,QAAQ,cAAcuB,MAAO5B,MAE/C,cAIlB,SAAC,KAAD,CAAMW,MAAI,EAACC,GAAI,GAAf,UACI,SAAC,IAAD,CACIiB,YAAY,mBACZC,MAAM,WACNC,KAAK,WACL1B,QAAQ,WACR2B,WAAS,EAACC,UAAQ,EAClBL,MAAOhC,EACPwB,SAAU,SAACC,GAAD,OAAOxB,EAAYwB,EAAEC,OAAOM,QACtCM,WAAS,EAACC,KAAM,EAChBhC,GAAI,CACA,wEAAyE,CACrEiC,YAAa,aAK7B,SAAC,KAAD,CAAMzB,MAAI,EAACC,GAAI,GAAf,UACI,SAAC,IAAD,CAAKC,UAAU,SAAf,UACI,SAAC,IAAD,CAAQM,KAAK,SACTd,QAAQ,YACRU,MAAO,CACHsB,gBAAiB3C,EAAS,UAAY,UACtC4C,SAAU,OACVC,aAAc,GACdb,MAAO,WAEXc,QApHN,SAACC,GACnBA,EAAMC,iBACN/C,GAAU,GAEV,IAAMgD,GAAaC,EAAAA,EAAAA,IAAIC,EAAAA,EAAS,UAAY/C,EAAMiC,MAC5Ce,GAAaC,EAAAA,EAAAA,IAAqBJ,EAAY7C,GAEpDgD,EAAWE,GAAG,iBACV,SAACC,GAEG,IAAMC,EAAkBC,KAAKC,MACxBH,EAASI,iBAAmBJ,EAASK,WAAc,KAExDrD,EAAYiD,MAEhB,SAACK,GACWA,EAAMC,QAkBlB,YAEIC,EAAAA,EAAAA,IAAeX,EAAWG,SAASL,KAAKc,MAAK,SAACC,GAC1C,IAAMC,GAAaC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,aAClCC,EAAAA,EAAAA,IAAOH,EAAY,CACfhE,SAAUA,EACVoE,SAAUL,EACVM,UAAWC,EAAAA,GAAAA,MAAgBC,WAE1BT,MAAK,WACF/D,GAAU,GACVM,EAAY,GACZmE,MAAM,qCAETC,OAAM,SAACd,GACJa,MAAMb,EAAMe,SACZ3E,GAAU,YAM9BE,EAAY,IACZE,EAAS,KAmDW,6BAeZ","sources":["admin/add/AddPicture.js"],"sourcesContent":["import { Container, Grid, Typography, TextField, Box, Button } from '@mui/material';\r\nimport * as React from 'react';\r\nimport { LinearProgress } from '@mui/material';\r\nimport UploadIcon from '@mui/icons-material/Upload';\r\n\r\nimport { Timestamp, collection, addDoc } from 'firebase/firestore';\r\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\r\nimport { storage, db } from '../../config/firebaseConfig';\r\n\r\n\r\nconst AddPicture = () => {\r\n    const [loader, setLoader] = React.useState(false);\r\n    const [abstract, setAbstract] = React.useState('');\r\n    const [image, setImage] = React.useState(null);\r\n    const [progress, setProgress] = React.useState(0);\r\n\r\n    const handleImageChange = (e) => {\r\n        setImage(e.target.files[0])\r\n    }\r\n\r\n    const handlePublish = (event) => {\r\n        event.preventDefault();\r\n        setLoader(true);\r\n\r\n        const storageRef = ref(storage, 'images/' + image.name);\r\n        const uploadTask = uploadBytesResumable(storageRef, image);\r\n\r\n        uploadTask.on('state_changed',\r\n            (snapshot) => {\r\n                // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\r\n                const progressPercent = Math.round(\r\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n                );\r\n                setProgress(progressPercent);\r\n            },\r\n            (error) => {\r\n                switch (error.code) {\r\n                    case 'storage/unauthorized':\r\n                        // User doesn't have permission to access the object\r\n                        break;\r\n                    case 'storage/canceled':\r\n                        // User canceled the upload\r\n                        break;\r\n\r\n                    // ...\r\n\r\n                    case 'storage/unknown':\r\n                        // Unknown error occurred, inspect error.serverResponse\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n            },\r\n            () => {\r\n                // Upload completed successfully, now we can get the download URL\r\n                getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\r\n                    const PictureRef = collection(db, \"Pictures\");\r\n                    addDoc(PictureRef, {\r\n                        abstract: abstract,\r\n                        imageUrl: downloadURL,\r\n                        createdAt: Timestamp.now().toDate(),\r\n                    })\r\n                        .then(() => {\r\n                            setLoader(false);\r\n                            setProgress(0);\r\n                            alert('Picture Successfully Published');\r\n                        })\r\n                        .catch((error) => {\r\n                            alert(error.message);\r\n                            setLoader(false);\r\n                        });\r\n                });\r\n            }\r\n        );\r\n\r\n        setAbstract('');\r\n        setImage('')\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Container maxWidth='lg' sx={{ paddingTop: '70px' }}>\r\n                <Typography variant='h3' align='center'>\r\n                    Add Picture\r\n                </Typography>\r\n                <Grid container spacing={1.3} sx={{ marginTop: '20px', marginBottom: '20px' }}>\r\n                    <Grid item xs={6}>\r\n                        <Box textAlign='center'>\r\n                            <input\r\n                                accept=\"image/*\"\r\n                                style={{ display: 'none' }}\r\n                                id=\"raised-button-file\"\r\n                                multiple\r\n                                type=\"file\"\r\n                                onChange={handleImageChange}\r\n                            />\r\n                            <label htmlFor=\"raised-button-file\">\r\n                                <Button component=\"span\" sx={{ color: '#333333' }}>\r\n                                    <UploadIcon /> Picture Cover Image\r\n                                </Button>\r\n                                {loader ?\r\n                                    <Box sx={{ width: '100%' }}>\r\n                                        <LinearProgress variant=\"determinate\" value={progress} />\r\n                                    </Box>\r\n                                    : null}\r\n                            </label>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            placeholder='Picture Abstract'\r\n                            label='Abstract'\r\n                            name='abstract'\r\n                            variant='outlined'\r\n                            fullWidth required\r\n                            value={abstract}\r\n                            onChange={(e) => setAbstract(e.target.value)}\r\n                            multiline rows={2}\r\n                            sx={{\r\n                                '& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline': {\r\n                                    borderWidth: '1px'\r\n                                }\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Box textAlign='center'>\r\n                            <Button type='submit'\r\n                                variant='contained'\r\n                                style={{\r\n                                    backgroundColor: loader ? '#e76b50' : '#551b10',\r\n                                    fontSize: '14px',\r\n                                    borderRadius: 10,\r\n                                    color: '#e1e1e1'\r\n                                }}\r\n                                onClick={handlePublish}\r\n                            >\r\n                                Publish\r\n                            </Button>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n                <br />\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddPicture\r\n\r\n\r\n"],"names":["React","loader","setLoader","abstract","setAbstract","image","setImage","progress","setProgress","maxWidth","sx","paddingTop","variant","align","container","spacing","marginTop","marginBottom","item","xs","textAlign","accept","style","display","id","multiple","type","onChange","e","target","files","htmlFor","component","color","width","value","placeholder","label","name","fullWidth","required","multiline","rows","borderWidth","backgroundColor","fontSize","borderRadius","onClick","event","preventDefault","storageRef","ref","storage","uploadTask","uploadBytesResumable","on","snapshot","progressPercent","Math","round","bytesTransferred","totalBytes","error","code","getDownloadURL","then","downloadURL","PictureRef","collection","db","addDoc","imageUrl","createdAt","Timestamp","toDate","alert","catch","message"],"sourceRoot":""}