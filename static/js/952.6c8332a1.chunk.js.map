{"version":3,"file":"static/js/952.6c8332a1.chunk.js","mappings":"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","sources":["admin/add/AddArticle.js"],"sourcesContent":["import { Container, Grid, Typography, TextField, Box, Button } from '@mui/material';\r\nimport * as React from 'react';\r\nimport { LinearProgress } from '@mui/material';\r\nimport UploadIcon from '@mui/icons-material/Upload';\r\n\r\nimport { Timestamp, collection, addDoc } from 'firebase/firestore';\r\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\r\nimport { storage, db } from '../../config/firebaseConfig';\r\n\r\n\r\nconst AddArticle = () => {\r\n    const [author, setAuthor] = React.useState('');\r\n    const [loader, setLoader] = React.useState(false);\r\n    const [title, setTitle] = React.useState('');\r\n    const [abstract, setAbstract] = React.useState('');\r\n    const [image, setImage] = React.useState(null);\r\n    const [body, setBody] = React.useState('');\r\n    const [progress, setProgress] = React.useState(0);\r\n\r\n\r\n    const handleImageChange = (e) => {\r\n        setImage(e.target.files[0])\r\n    }\r\n\r\n    const handlePublish = (event) => {\r\n        event.preventDefault();\r\n        setLoader(true);\r\n\r\n        const storageRef = ref(storage, 'images/' + image.name);\r\n        const uploadTask = uploadBytesResumable(storageRef, image);\r\n\r\n        uploadTask.on('state_changed',\r\n            (snapshot) => {\r\n                // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\r\n                const progressPercent = Math.round(\r\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n                );\r\n                setProgress(progressPercent);\r\n            },\r\n            (error) => {\r\n                switch (error.code) {\r\n                    case 'storage/unauthorized':\r\n                        // User doesn't have permission to access the object\r\n                        break;\r\n                    case 'storage/canceled':\r\n                        // User canceled the upload\r\n                        break;\r\n\r\n                    // ...\r\n\r\n                    case 'storage/unknown':\r\n                        // Unknown error occurred, inspect error.serverResponse\r\n                        break;\r\n                    default : \r\n                        break;\r\n                }\r\n            },\r\n            () => {\r\n                // Upload completed successfully, now we can get the download URL\r\n                getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\r\n                    const articleRef = collection(db, \"Articles\");\r\n                    addDoc(articleRef, {\r\n                        title: title,\r\n                        abstract: abstract,\r\n                        body: body,\r\n                        author: author,\r\n                        imageUrl: downloadURL,\r\n                        createdAt: Timestamp.now().toDate(),\r\n                    })\r\n                        .then(() => {\r\n                            setLoader(false);\r\n                            setProgress(0);\r\n                            alert('Article Successfully Published');\r\n                        })\r\n                        .catch((error) => {\r\n                            alert(error.message);\r\n                            setLoader(false);\r\n                        });\r\n                });\r\n            }\r\n        );\r\n\r\n        setTitle('');\r\n        setAbstract('');\r\n        setBody('');\r\n        setImage('');\r\n        setAuthor('');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Container maxWidth='lg' sx={{paddingTop: '70px'}}>\r\n                <Typography variant='h3' align='center'>\r\n                    Add Article\r\n                </Typography>\r\n\r\n                <Grid container spacing={1.3} sx={{ marginTop: '20px', marginBottom: '20px' }}>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            placeholder='Article Title'\r\n                            label='Title'\r\n                            name='title'\r\n                            variant='outlined'\r\n                            value={title}\r\n                            onChange={(e) => setTitle(e.target.value)}\r\n                            fullWidth required\r\n                            sx={{\r\n                                '& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline': {\r\n                                    borderWidth: '1px'\r\n                                }\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid container spacing={1.3} sx={{ marginTop: '20px', marginBottom: '20px' }}>\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                placeholder='Author'\r\n                                label='Author'\r\n                                name='author'\r\n                                variant='outlined'\r\n                                value={author}\r\n                                onChange={(e) => setAuthor(e.target.value)}\r\n                                fullWidth required\r\n                                sx={{\r\n                                    '& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline': {\r\n                                        borderWidth: '1px'\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Box textAlign='center'>\r\n                                <input\r\n                                    accept=\"image/*\"\r\n                                    style={{ display: 'none' }}\r\n                                    id=\"raised-button-file\"\r\n                                    multiple\r\n                                    type=\"file\"\r\n                                    onChange={handleImageChange}\r\n                                />\r\n                                <label htmlFor=\"raised-button-file\">\r\n                                    <Button component=\"span\" sx={{ color: '#333333' }}>\r\n                                        <UploadIcon /> Article Cover Image\r\n                                    </Button>\r\n                                    {loader ?\r\n                                        <Box sx={{ width: '100%' }}>\r\n                                            <LinearProgress variant=\"determinate\" value={progress} />\r\n                                        </Box>\r\n                                        : null}\r\n                                </label>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                placeholder='Article Abstract'\r\n                                label='Abstract'\r\n                                name='abstract'\r\n                                variant='outlined'\r\n                                fullWidth required\r\n                                value={abstract}\r\n                                onChange={(e) => setAbstract(e.target.value)}\r\n                                multiline rows={2}\r\n                                sx={{\r\n                                    '& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline': {\r\n                                        borderWidth: '1px'\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                placeholder='Article Body'\r\n                                name='body'\r\n                                variant='outlined'\r\n                                fullWidth required\r\n                                multiline rows={15}\r\n                                value={body}\r\n                                onChange={(e) => setBody(e.target.value)}\r\n                                sx={{\r\n                                    '& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline': {\r\n                                        borderWidth: '1px'\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Box textAlign='center'>\r\n                                <Button type='submit'\r\n                                    variant='contained'\r\n                                    style={{\r\n                                        backgroundColor: loader ? '#e76b50' : '#551b10',\r\n                                        fontSize: '14px',\r\n                                        borderRadius: 10,\r\n                                        color: '#e1e1e1'\r\n                                    }}\r\n                                    onClick={handlePublish}\r\n                                >\r\n                                    Publish\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <br />\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddArticle\r\n\r\n\r\n"],"names":["React","author","setAuthor","loader","setLoader","title","setTitle","abstract","setAbstract","image","setImage","body","setBody","progress","setProgress","maxWidth","sx","paddingTop","variant","align","container","spacing","marginTop","marginBottom","item","xs","placeholder","label","name","value","onChange","e","target","fullWidth","required","borderWidth","textAlign","accept","style","display","id","multiple","type","files","htmlFor","component","color","width","multiline","rows","backgroundColor","fontSize","borderRadius","onClick","event","preventDefault","storageRef","ref","storage","uploadTask","uploadBytesResumable","on","snapshot","progressPercent","Math","round","bytesTransferred","totalBytes","error","code","getDownloadURL","then","downloadURL","articleRef","collection","db","addDoc","imageUrl","createdAt","Timestamp","toDate","alert","catch","message"],"sourceRoot":""}